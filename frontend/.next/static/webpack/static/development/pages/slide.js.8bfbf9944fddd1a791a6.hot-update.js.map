{"version":3,"file":"static/webpack/static/development/pages/slide.js.8bfbf9944fddd1a791a6.hot-update.js","sources":["webpack:///./pages/slide.js"],"sourcesContent":["import React from \"react\"\n\nimport { Query } from 'react-apollo'\nimport gql from 'graphql-tag'\nimport { GET_ORDER } from './../graphql/querries'\nimport Video from './../components/Video/Video'\nimport Texte from './../components/Texte/Texte'\nimport Quote from './../components/Quote/Quote'\n\n\nconst  dynamicSort = (property) => {\n    let sortOrder = 1;\n    if(property[0] === \"-\") {\n        sortOrder = -1;\n        property = property.substr(1);\n    }\n    return function (a,b) {\n        let result = (a[property] < b[property]) ? -1 : (a[property] > b[property]) ? 1 : 0;\n        return result * sortOrder;\n    }\n}\n\nconst getArrayofLink = (data) => {\n    let newArray = []\n\n    data.parcours.map( ( parcour, key) => {\n        newArray = parcour.textes.concat(parcour.quotes).concat(parcour.videos)\n    })\n\n    const arr = [...newArray].sort(dynamicSort(\"ordre\"))\n    return arr\n    \n}\n\nconst Custom = ( { data, id, order, chapitre } ) => {\n\n    let items = getArrayofLink(data)\n    return (\n        <div> \n        {   data.parcours.map( ( parcour, key ) => (\n                <div key={key}>\n                {   parcour.textes.length !== 0\n                    ? <Texte \n                        texte={parcour.textes}\n                        color={parcour.couleur}\n                        order={order}\n                        slug={parcour.url_slug}\n                        key={key}\n                        items={items}\n                        chapitre={chapitre}\n                        />\n                    : ( parcour.videos.length !== 0\n                        ? <Video \n                            video={parcour.videos}\n                            color={parcour.couleur} \n                            order={order} \n                            slug={parcour.url_slug} \n                            key={key}\n                            />\n                        : ( parcour.quotes.length !== 0\n                            ? <Quote \n                                quote={parcour.quotes}\n                                color={parcour.couleur}\n                                order={order}\n                                slug={parcour.url_slug}\n                                key={key} \n                                character={ parcour.personnage.url }\n                                character_name= { parcour.character_name }\n                            />\n                            : null\n                        )\n                    )\n                }\n                </div>\n            ))  \n        }\n        </div>\n    )\n}\n\nclass Slide extends React.Component {\n  \n    static getInitialProps ({ query: { id, chapitre, order } }) {\n        return { postId: id, postChapitre: chapitre, postOrder: order }\n    }\n\n    render() {\n        return (\n            <Query query={ GET_ORDER } variables={ { id: this.props.postId, chapitre: this.props.postChapitre } }>\n                {({ loading, error, data }) => {\n                    return (\n                        <Custom data={data} id={this.props.postId} order={this.props.postOrder} chapitre={this.props.postChapitre}></Custom>\n                    )\n                }}\n            </Query>\n        )\n    }\n}\n\nexport default Slide;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAWA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AArBA;AAuCA;AACA;AACA;;;;;;;;;;;;;AAMA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;;;AAdA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;;;AAJA;AACA;AAkBA;;;;A","sourceRoot":""}